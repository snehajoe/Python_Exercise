/// You can input your Sudoku puzzle as a list of lists and run the solve_sudoku function to solve it using this code.

def is_valid(board, row, col, num):
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    return True

def solve_sudoku(board):
    empty_cell = find_empty_cell(board)
    if not empty_cell:
        return True
    row, col = empty_cell
    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return True
            board[row][col] = 0
    return False

def find_empty_cell(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

# Example Sudoku board (0 represents empty cells)
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0 ,0 ,1],
    [7 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,6],
    [0 ,6 ,0 ,0 ,0 ,0 ,2 ,8 ,0],
    [0 ,0 ,0 ,4 ,1 ,9 ,7 ,9 ,2],
    [1 ,9 ,7 ,5 ,8 ,2 ,6 ,4 ,5]
]

if solve_sudoku(board):
    print("Sudoku Solved:")
    for row in board:
        print(row)
else:
    print("No solution exists.")
